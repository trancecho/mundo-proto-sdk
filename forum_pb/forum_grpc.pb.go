// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: forum_pb/forum.proto

package forum_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ForumService_CreateForumPost_FullMethodName  = "/forum.ForumService/CreateForumPost"
	ForumService_GetForumPostByID_FullMethodName = "/forum.ForumService/GetForumPostByID"
	ForumService_ListForumPosts_FullMethodName   = "/forum.ForumService/ListForumPosts"
	ForumService_UpdateForumPost_FullMethodName  = "/forum.ForumService/UpdateForumPost"
	ForumService_DeleteForumPost_FullMethodName  = "/forum.ForumService/DeleteForumPost"
)

// ForumServiceClient is the client API for ForumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumServiceClient interface {
	CreateForumPost(ctx context.Context, in *CreateForumPostRequest, opts ...grpc.CallOption) (*ForumPostResponse, error)
	GetForumPostByID(ctx context.Context, in *GetForumPostByIDRequest, opts ...grpc.CallOption) (*ForumPostResponse, error)
	ListForumPosts(ctx context.Context, in *ListForumPostsRequest, opts ...grpc.CallOption) (*ListForumPostsResponse, error)
	UpdateForumPost(ctx context.Context, in *UpdateForumPostRequest, opts ...grpc.CallOption) (*ForumPostResponse, error)
	DeleteForumPost(ctx context.Context, in *DeleteForumPostRequest, opts ...grpc.CallOption) (*Empty, error)
}

type forumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForumServiceClient(cc grpc.ClientConnInterface) ForumServiceClient {
	return &forumServiceClient{cc}
}

func (c *forumServiceClient) CreateForumPost(ctx context.Context, in *CreateForumPostRequest, opts ...grpc.CallOption) (*ForumPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForumPostResponse)
	err := c.cc.Invoke(ctx, ForumService_CreateForumPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) GetForumPostByID(ctx context.Context, in *GetForumPostByIDRequest, opts ...grpc.CallOption) (*ForumPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForumPostResponse)
	err := c.cc.Invoke(ctx, ForumService_GetForumPostByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) ListForumPosts(ctx context.Context, in *ListForumPostsRequest, opts ...grpc.CallOption) (*ListForumPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListForumPostsResponse)
	err := c.cc.Invoke(ctx, ForumService_ListForumPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) UpdateForumPost(ctx context.Context, in *UpdateForumPostRequest, opts ...grpc.CallOption) (*ForumPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForumPostResponse)
	err := c.cc.Invoke(ctx, ForumService_UpdateForumPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) DeleteForumPost(ctx context.Context, in *DeleteForumPostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ForumService_DeleteForumPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServiceServer is the server API for ForumService service.
// All implementations must embed UnimplementedForumServiceServer
// for forward compatibility.
type ForumServiceServer interface {
	CreateForumPost(context.Context, *CreateForumPostRequest) (*ForumPostResponse, error)
	GetForumPostByID(context.Context, *GetForumPostByIDRequest) (*ForumPostResponse, error)
	ListForumPosts(context.Context, *ListForumPostsRequest) (*ListForumPostsResponse, error)
	UpdateForumPost(context.Context, *UpdateForumPostRequest) (*ForumPostResponse, error)
	DeleteForumPost(context.Context, *DeleteForumPostRequest) (*Empty, error)
	mustEmbedUnimplementedForumServiceServer()
}

// UnimplementedForumServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForumServiceServer struct{}

func (UnimplementedForumServiceServer) CreateForumPost(context.Context, *CreateForumPostRequest) (*ForumPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForumPost not implemented")
}
func (UnimplementedForumServiceServer) GetForumPostByID(context.Context, *GetForumPostByIDRequest) (*ForumPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForumPostByID not implemented")
}
func (UnimplementedForumServiceServer) ListForumPosts(context.Context, *ListForumPostsRequest) (*ListForumPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForumPosts not implemented")
}
func (UnimplementedForumServiceServer) UpdateForumPost(context.Context, *UpdateForumPostRequest) (*ForumPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForumPost not implemented")
}
func (UnimplementedForumServiceServer) DeleteForumPost(context.Context, *DeleteForumPostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForumPost not implemented")
}
func (UnimplementedForumServiceServer) mustEmbedUnimplementedForumServiceServer() {}
func (UnimplementedForumServiceServer) testEmbeddedByValue()                      {}

// UnsafeForumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServiceServer will
// result in compilation errors.
type UnsafeForumServiceServer interface {
	mustEmbedUnimplementedForumServiceServer()
}

func RegisterForumServiceServer(s grpc.ServiceRegistrar, srv ForumServiceServer) {
	// If the following call pancis, it indicates UnimplementedForumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ForumService_ServiceDesc, srv)
}

func _ForumService_CreateForumPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForumPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).CreateForumPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_CreateForumPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).CreateForumPost(ctx, req.(*CreateForumPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_GetForumPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForumPostByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).GetForumPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_GetForumPostByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).GetForumPostByID(ctx, req.(*GetForumPostByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_ListForumPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListForumPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).ListForumPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_ListForumPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).ListForumPosts(ctx, req.(*ListForumPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_UpdateForumPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForumPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).UpdateForumPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_UpdateForumPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).UpdateForumPost(ctx, req.(*UpdateForumPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_DeleteForumPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForumPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).DeleteForumPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_DeleteForumPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).DeleteForumPost(ctx, req.(*DeleteForumPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForumService_ServiceDesc is the grpc.ServiceDesc for ForumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forum.ForumService",
	HandlerType: (*ForumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateForumPost",
			Handler:    _ForumService_CreateForumPost_Handler,
		},
		{
			MethodName: "GetForumPostByID",
			Handler:    _ForumService_GetForumPostByID_Handler,
		},
		{
			MethodName: "ListForumPosts",
			Handler:    _ForumService_ListForumPosts_Handler,
		},
		{
			MethodName: "UpdateForumPost",
			Handler:    _ForumService_UpdateForumPost_Handler,
		},
		{
			MethodName: "DeleteForumPost",
			Handler:    _ForumService_DeleteForumPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forum_pb/forum.proto",
}
